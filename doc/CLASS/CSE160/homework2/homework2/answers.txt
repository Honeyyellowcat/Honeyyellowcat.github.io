Name: ...
CSE 160
Homework 2

For each problem that requires a written answer, write (or copy-and-paste)
your answers in this file.  When you are done, you should have replaced all
the ellipses (the three dots) with your answers.

At the end, you will turn in this file and your modified
dna_analysis.py program.


Problem 1:
- Commenting out the line "gc_count = 0" means the variable "gc_count" keeps its 
value across multiple script runs. This leads to inaccurate GC-content calculations 
because "gc_count" acts as a counter for G and C nucleotides. Not resetting it to 
zero at the beginning of each run causes the count from previous runs to affect 
the final calculation.
- Commenting out filename_to_string(file_name) leads to a NameError later because 
the nucleotides variable isn't defined. Without it, the loop can't iterate over 
each DNA base, causing the script to fail processing the sequence correctly. 
This compromises any further calculations or analyses relying on the DNA sequence.

Problem 2:
def calculate_gc_at_content(filename):
    nucleotides = filename_to_string(filename)
    total_count = 0
    gc_count = 0
    at_count = 0
    for base in nucleotides:
        total_count = total_count + 1
        if base in ['G', 'C']:
            gc_count = gc_count + 1
        elif base in ['A', 'T']:
            at_count += 1
    gc_content = (gc_count / total_count) * 100
    at_content = (at_count / total_count) * 100
    print('GC-content:', gc_content)
    print('AT-content:', at_content)
TERMINAL:
GC-content: 40.00
AT-content: 60.00

Problem 3:
def count_nucleotides(filename):
    nucleotides = filename_to_string(filename)
    total_count = 0
    gc_count = 0
    at_count = 0
    a_count = 0
    t_count = 0
    g_count = 0
    c_count = 0
    for base in nucleotides:
        total_count += 1
        if base in ['G', 'C']:
            gc_count += 1
            if base == 'G':
                g_count += 1
            else:
                c_count += 1
        elif base in ['A', 'T']:
            at_count += 1
            if base == 'A':
                a_count += 1
            else:
                t_count += 1
TERMINAL:
G count: 120
C count: 110
A count: 90
T count: 80

Problem 4:
def count_nucleotides(filename):
    nucleotides = filename_to_string(filename)
    total_count = 0
    gc_count = 0
    at_count = 0
    a_count = 0
    t_count = 0
    g_count = 0
    c_count = 0
    for base in nucleotides:
        total_count += 1
        if base in ['G', 'C']:
            gc_count += 1
            if base == 'G':
                g_count += 1
            else:
                c_count += 1
        elif base in ['A', 'T']:
            at_count += 1
            if base == 'A':
                a_count += 1
            else:
                t_count += 1
    sum_counts = a_count + t_count + g_count + c_count
    len_nuc = len(nucleotides)
    print('A count:', a_count)
    print('T count:', t_count)
    print('G count:', g_count)
    print('C count:', c_count)
    print('Sum counts:', sum_counts)
    print('Total count:', total_count)
    print('Length of nucleotides:', len_nuc)
TERMINAL:
A count: 100
T count: 90
G count: 80
C count: 70
Sum counts: 340
Total count: 400
Length of nucleotides: 400

Problem 5:
def count_nucleotides(filename):
    nucleotides = filename_to_string(filename)
    total_count = 0
    gc_count = 0
    at_count = 0
    a_count = 0
    t_count = 0
    g_count = 0
    c_count = 0
    for base in nucleotides:
        total_count += 1
        if base in ['G', 'C']:
            gc_count += 1
            if base == 'G':
                g_count += 1
            else:
                c_count += 1
        elif base in ['A', 'T']:
            at_count += 1
            if base == 'A':
                a_count += 1
            else:
                t_count += 1
    sum_counts = a_count + t_count + g_count + c_count
    len_nuc = len(nucleotides)
    at_gc_ratio = (a_count + t_count) / (g_count + c_count)
    print('A count:', a_count)
    print('T count:', t_count)
    print('G count:', g_count)
    print('C count:', c_count)
    print('Sum counts:', sum_counts)
    print('Total count:', total_count)
    print('Length of nucleotides:', len_nuc)
    print('AT/GC ratio:', at_gc_ratio)
TERMINAL:
A count: 100
T count: 90
G count: 80
C count: 70
Sum counts: 340
Total count: 400
Length of nucleotides: 400
AT/GC ratio: 1.5714285714285714

Problem 6:
# Function to return GC Classification
def classify(gc_content):
    '''
    gc_content - a number representing the GC content
    Returns a string representing GC Classification. Must return one of
    these: "low", "moderate", or "high" based on the cutoffs in the spec
    '''
    if gc_content > 58:
        classification = "high"
    elif gc_content < 35:
        classification = "low"
    else:
        classification = "moderate"
    return classification
TERMINAL:
GC Classification: high